{
  "version": 3,
  "sources": ["../../src-backend/ext/Room.ts"],
  "sourcesContent": ["//\n// Monkey-patch Colyseus' default behaviour\n//\nimport { Room, Client, ClientPrivate } from \"@colyseus/core\";\n\nfunction getStateSize(room) {\n    // TODO: `Serializer<T>` should provide a method for this (e.g. `serializer.hasState()`)\n    const hasState = (\n      room._serializer.encoder || // schema v3\n      room._serializer.state || // schema v2\n      room._serializer.previousState // legacy-fossil-delta\n    );\n    const fullState = hasState && room._serializer.getFullState();\n    return fullState && (fullState.byteLength || fullState.length) || 0;\n}\n\n(<any>Room.prototype).getAvailableData = function () {\n    return {\n        clients: this.clients.length,\n        maxClients: this.maxClients,\n        metadata: this.metadata,\n        roomId: this.roomId,\n    };\n};\n\n(<any>Room.prototype).getRoomListData = async function () {\n    const stateSize = getStateSize(this);\n    const elapsedTime = this.clock.elapsedTime;\n    const locked = this.locked;\n    const data = this.getAvailableData();\n\n    return { ...data, locked, elapsedTime, stateSize };\n};\n\n(<any>Room.prototype).getInspectData = async function () {\n    const state = this.state;\n    const stateSize = getStateSize(this);\n    const roomElapsedTime = this.clock.elapsedTime;\n\n    const data = this.getAvailableData();\n    const clients = this.clients.map((client: Client & ClientPrivate) => ({\n        sessionId: client.sessionId,\n        elapsedTime: roomElapsedTime - client._joinedAt\n    }));\n    const locked = this.locked;\n\n    return { ...data, locked, clients, state, stateSize };\n};\n\n// Actions\n(<any>Room.prototype)._forceClientDisconnect = async function (sessionId) {\n    for (let i = 0; i < this.clients.length; i++) {\n        if (this.clients[i].sessionId === sessionId) {\n            this.clients[i].leave();\n            break;\n        }\n    }\n};\n\n(<any>Room.prototype)._sendMessageToClient = async function (sessionId, type, data) {\n    for (let i = 0; i < this.clients.length; i++) {\n        if (this.clients[i].sessionId === sessionId) {\n            this.clients[i].send(type, data);\n            break;\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,YAAmC;AAE5C,SAAS,aAAa,MAAM;AAExB,QAAM,WACJ,KAAK,YAAY;AAAA,EACjB,KAAK,YAAY;AAAA,EACjB,KAAK,YAAY;AAEnB,QAAM,YAAY,YAAY,KAAK,YAAY,aAAa;AAC5D,SAAO,cAAc,UAAU,cAAc,UAAU,WAAW;AACtE;AAEM,KAAK,UAAW,mBAAmB,WAAY;AACjD,SAAO;AAAA,IACH,SAAS,KAAK,QAAQ;AAAA,IACtB,YAAY,KAAK;AAAA,IACjB,UAAU,KAAK;AAAA,IACf,QAAQ,KAAK;AAAA,EACjB;AACJ;AAEM,KAAK,UAAW,kBAAkB,iBAAkB;AACtD,QAAM,YAAY,aAAa,IAAI;AACnC,QAAM,cAAc,KAAK,MAAM;AAC/B,QAAM,SAAS,KAAK;AACpB,QAAM,OAAO,KAAK,iBAAiB;AAEnC,SAAO,iCAAK,OAAL,EAAW,QAAQ,aAAa,UAAU;AACrD;AAEM,KAAK,UAAW,iBAAiB,iBAAkB;AACrD,QAAM,QAAQ,KAAK;AACnB,QAAM,YAAY,aAAa,IAAI;AACnC,QAAM,kBAAkB,KAAK,MAAM;AAEnC,QAAM,OAAO,KAAK,iBAAiB;AACnC,QAAM,UAAU,KAAK,QAAQ,IAAI,CAAC,YAAoC;AAAA,IAClE,WAAW,OAAO;AAAA,IAClB,aAAa,kBAAkB,OAAO;AAAA,EAC1C,EAAE;AACF,QAAM,SAAS,KAAK;AAEpB,SAAO,iCAAK,OAAL,EAAW,QAAQ,SAAS,OAAO,UAAU;AACxD;AAGM,KAAK,UAAW,yBAAyB,eAAgB,WAAW;AACtE,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,QAAI,KAAK,QAAQ,CAAC,EAAE,cAAc,WAAW;AACzC,WAAK,QAAQ,CAAC,EAAE,MAAM;AACtB;AAAA,IACJ;AAAA,EACJ;AACJ;AAEM,KAAK,UAAW,uBAAuB,eAAgB,WAAW,MAAM,MAAM;AAChF,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,QAAI,KAAK,QAAQ,CAAC,EAAE,cAAc,WAAW;AACzC,WAAK,QAAQ,CAAC,EAAE,KAAK,MAAM,IAAI;AAC/B;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
